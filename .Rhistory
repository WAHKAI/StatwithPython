data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30)
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp9=random.sample(list(data["height"]), 9) # sampling
data["height"].std() # population sd
st.stdev(samp9) # sample sd
data["height"].std()/math.sqrt(9) #standard error
st.mean(samp9) # sample mean
(st.mean(samp9)-70)/(data["height"].std()/math.sqrt(9)) # z value
ztest(samp9, value=70) #???
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["height"]), 30) # sampling
data["height"].std() # population sd
st.stdev(samp30) # sample sd
data["height"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["height"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
stats.shapiro(data["Height"])
#| echo: true
stats.shapiro(data["height"])
#| echo: true
stats.shapiro(data)
#| echo: true
stats.shapiro(data["weight"])
#| echo: true
stats.shapiro(data["bavg"])
#| echo: true
sns.histplot(data=data, x="bavg", binwidth=5)
#| echo: true
samp9=random.sample(list(data["bavg"]), 9) # sampling
data["bavg"].std() # population sd
st.stdev(samp9) # sample sd
data["bavg"].std()/math.sqrt(9) #standard error
st.mean(samp9) # sample mean
(st.mean(samp9)-70)/(data["bavg"].std()/math.sqrt(9)) # z value
ztest(samp9, value=70) #???
#| echo: true
samp30=random.sample(list(data["bavg"]), 30) # sampling
data["bavg"].std() # population sd
st.stdev(samp30) # sample sd
data["bavg"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-70)/(data["bavg"].std()/math.sqrt(30)) # z value
ztest(samp30, value=70) #
#| echo: true
samp30=random.sample(list(data["bavg"]), 30) # sampling
data["bavg"].std() # population sd
st.stdev(samp30) # sample sd
data["bavg"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-0.25)/(data["bavg"].std()/math.sqrt(30)) # z value
ztest(samp30, value=0.25) #
#| echo: true
samp9=random.sample(list(data["bavg"]), 9) # sampling
data["bavg"].std() # population sd
st.stdev(samp9) # sample sd
data["bavg"].std()/math.sqrt(9) #standard error
st.mean(samp9) # sample mean
(st.mean(samp9)-0.25)/(data["bavg"].std()/math.sqrt(9)) # z value
ztest(samp9, value=0.25)
#| echo: true
samp9=random.sample(list(data["bavg"]), 9) # sampling
data["bavg"].std() # population sd
st.stdev(samp9) # sample sd
data["bavg"].std()/math.sqrt(9) #standard error
st.mean(samp9) # sample mean
(st.mean(samp9)-0.25)/(data["bavg"].std()/math.sqrt(9)) # z value
ztest(samp9, value=0.25)
#| echo: true
samp30=random.sample(list(data["bavg"]), 30) # sampling
data["bavg"].std() # population sd
st.stdev(samp30) # sample sd
data["bavg"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-0.25)/(data["bavg"].std()/math.sqrt(30)) # z value
ztest(samp30, value=0.25) #
samp30
#| echo: true
from bioinfokit.analys import stat
samp30=random.sample(list(data["bavg"]), 30) # sampling
data["bavg"].std() # population sd
st.stdev(samp30) # sample sd
data["bavg"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-0.25)/(data["bavg"].std()/math.sqrt(30)) # z value
ztest(samp30, value=0.25) #
res = stat()
res.ztest(df=samp30, mu=0.25, x_std=data["bavg"].std())
print(res.summary)
samp30
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
samp30=random.sample(list(data["bavg"]), 30) # sampling
data["bavg"].std() # population sd
st.stdev(samp30) # sample sd
data["bavg"].std()/math.sqrt(30) #standard error
st.mean(samp30) # sample mean
(st.mean(samp30)-0.25)/(data["bavg"].std()/math.sqrt(30)) # z value
ztest(samp30, value=0.25) #z value with sample sd
#| echo: true
ztest(data['bavg'], value=0.25)
ztest(data['bavg'], value=0.25, alternative="larger")
ztest(data['bavg'], value=0.25, alternative="smaller")
#| echo: true
data['bavg'].mean()
ztest(data['bavg'], value=0.25)
ztest(data['bavg'], value=0.25, alternative="larger")
ztest(data['bavg'], value=0.25, alternative="smaller")
#| echo: true
data["HR"].mean()
#| echo: true
np.mean(nsamp1000mean)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
samp1000
nsamp1000sd=np.std(samp1000,axis=1)
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 9) for i in range(1000)]
samp1000=np.array(samp1000)
nsamp1000sd=np.std(samp1000,axis=1)
nsamp1000sd
sns.histplot(nsamp1000sd, binwidth=5)
np.mean(nsamp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
samp1000sd=np.std(samp1000,axis=1)
sns.histplot(samp1000sd, binwidth=5)
np.mean(samp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
samp1000sd=np.std(samp1000,axis=1)
samp1000sd
sns.histplot(samp1000sd, binwidth=5)
np.mean(samp1000sd)
#| echo: true
data["bavg"].std() # population sd
samp1000=[random.sample(list(data["bavg"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
samp1000sd=np.std(samp1000,axis=1)
sns.histplot(samp1000sd, binwidth=0.1)
np.mean(samp1000sd)
#| echo: true
data["bavg"].std() # population sd
#| echo: true
samp9=random.sample(list(data["bavg"]), 9) # sampling
st.stdev(samp9) # sample sd
#| echo: true
(st.mean(samp9)-0.25)/(data["bavg"].std()/math.sqrt(9)) # z value
#| echo: true
ztest(samp9, value=0.25) #z value with sample sd
#| echo: true
(st.mean(samp9)-0.25)/(data["bavg"].std()/math.sqrt(9)) # z value
#| echo: true
(st.mean(samp9)-0.25)/(st.stdev(samp9)/math.sqrt(9)) # z value
#| echo: true
data["HR"].mean()
#| echo: true
st.norm.interval(alpha=0.95, loc=st.mean(samp1000), scale=st.sem(samp1000))
#| echo: true
stats.norm.interval(alpha=0.95, loc=st.mean(samp1000), scale=st.sem(samp1000))
#| echo: true
stats.norm.interval(alpha=0.95, loc=np.mean(samp1000), scale=st.sem(samp1000))
#| echo: true
stats.norm.interval(alpha=0.95, loc=np.mean(samp1000), scale=data["HR"].std())
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000), scale=data["HR"].std())
#| echo: true
samp1000=[random.sample(list(data["HR"]), 30) for i in range(1000)]
samp1000=np.array(samp1000)
samp1000
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000,axis=1), scale=data["HR"].std())
np.mean(samp1000,axis=1)
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000,axis=1), scale=data["HR"].std())
#| echo: true
ci95=stats.norm.interval(confidence=0.95, loc=np.mean(samp1000,axis=1), scale=data["HR"].std())
ci95[1]
#| echo: true
ci95=stats.norm.interval(confidence=0.95, loc=np.mean(samp1000,axis=1), scale=data["HR"].std())
ci95[1,]
ci95[[1]]
ci95[1]
ci95[1][1]
ci95[1][2]
View(ci95)
samp1000[1]
#| echo: true
ci95=stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[1],axis=1), scale=data["HR"].std())
ci95
#| echo: true
ci95=stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[1]), scale=data["HR"].std())
ci95
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[1],axis=1), scale=data["HR"].std())
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[1]), scale=data["HR"].std())
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[2]), scale=data["HR"].std())
#| echo: true
stats.norm.interval(confidence=0.95, loc=np.mean(samp1000[3]), scale=data["HR"].std())
#| echo: true
stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[1]), scale=data["HR"].std())
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[1]), scale=data["HR"].std()) for i in range(1000)]
ci1000
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()) for i in range(1000)]
ci1000
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/sqrt(30)) for i in range(1000)]
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
ci1000
ci1000[1]
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean() not in ci1000[i]:
statement(ci1000[i])
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean() not in ci1000[i]:
print(ci1000[i])
data["HR"].mean()
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean() not in ci1000[i]:
print(ci1000[i])
ci1000[i]
data["HR"].mean()
range(2, 20, 3)
ci1000[i][1]
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if (data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]):
print(ci1000[i])
range(1000)
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000){
if (data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1])
print(ci1000[i])
}
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000){
if (data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]){
print(ci1000[i])
}
}
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if (data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]){
print(ci1000[i])
}
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if (data["HR"].mean()<ci1000[i][0]||data["HR"].mean()>ci1000[i][1]){
print(ci1000[i])
}
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if (data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]){
print(ci1000[i])
}
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
n=0
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
print(n++)
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
n=0
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
n++
print(n)
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
n=0
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
n+=1
print(n)
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
n=0
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
n+=1
print(n)
print(n/1000)
#| echo: true
ci1000=[stats.norm.interval(confidence=0.95,\
loc=np.mean(samp1000[i]), scale=data["HR"].std()/math.sqrt(30)) for i in range(1000)]
n=0
for i in range(1000):
if data["HR"].mean()<ci1000[i][0] or data["HR"].mean()>ci1000[i][1]:
print(ci1000[i])
n+=1
print(n)
print((1000-n)/1000)
reticulate::repl_python()
